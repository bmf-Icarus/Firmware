#!/usr/bin/env groovy

pipeline {
  agent none

  parameters {
    choice(
      name: 'PX4_CMAKE_BUILD_TYPE',
      choices: ['RelWithDebInfo', 'Coverage', 'AddressSanitizer'],
      description: "CMake build type"
      )
  }

  stages {
    stage('Build') {

      agent {
        docker {
          image 'px4io/px4-dev-ros:2018-07-19'
          args '-e CCACHE_BASEDIR=$WORKSPACE -v ${CCACHE_DIR}:${CCACHE_DIR}:rw -e HOME=$WORKSPACE'
        }
      }

      stages {

        stage("build px4") {
          steps {
            sh('export')
            sh('make distclean')
            sh "ccache -z"
            sh('make posix_sitl_default')
            sh "ccache -s"
          }
        }

        stage("unit tests") {
          steps {
            sh 'make posix_sitl_default test_results_junit'
            junit 'build/posix_sitl_default/JUnitTestResults.xml'
            withCredentials([string(credentialsId: 'FIRMWARE_CODECOV_TOKEN', variable: 'CODECOV_TOKEN')]) {
              sh 'curl -s https://codecov.io/bash | bash -s - -F unittest'
            }
          }
        }

        stage("stash source") {
          steps {
            sh 'export'
            sh 'ls -a'
            stash includes: 'build/**, src/**', name: 'build_sitl_coverage'
            when {
              environment name: 'PX4_CMAKE_BUILD_TYPE', value: 'Coverage'
            }
          }
        }

        stage("build sitl_gazebo") {
          steps {
            sh "ccache -z"
            sh('make posix_sitl_default sitl_gazebo')
            sh "ccache -s"
          }
        }

        stage("package") {
          steps {
            sh('make posix_sitl_default package')
          }
        }

        stage('code coverage (python)') {
          steps {
            sh 'make python_coverage'
            withCredentials([string(credentialsId: 'FIRMWARE_CODECOV_TOKEN', variable: 'CODECOV_TOKEN')]) {
              sh 'curl -s https://codecov.io/bash | bash -s - -F python'
            }
            when {
              environment name: 'PX4_CMAKE_BUILD_TYPE', value: 'Coverage'
            }
          }
        }

      }
      post {
        success {
          stash(name: "px4_sitl_package", includes: "build/posix_sitl_default/*.bz2")
        }
        always {
          sh 'make distclean'
        }
      }
    }

    stage('ROS Tests') {
      steps {
        script {
          def missions = [
            [
              name: "FW",
              test: "mavros_posix_test_mission.test",
              mission: "FW_mission_1",
              vehicle: "plane"
            ],

            [
              name: "MC box",
              test: "mavros_posix_test_mission.test",
              mission: "MC_mission_box",
              vehicle: "iris"
            ],
            [
              name: "MC offboard att",
              test: "mavros_posix_tests_offboard_attctl.test",
              mission: "",
              vehicle: "iris"
            ],
            [
              name: "MC offboard pos",
              test: "mavros_posix_tests_offboard_posctl.test",
              mission: "",
              vehicle: "iris"
            ],

            [
              name: "VTOL standard",
              test: "mavros_posix_test_mission.test",
              mission: "VTOL_mission_1",
              vehicle: "standard_vtol"
            ],
            [
              name: "VTOL tailsitter",
              test: "mavros_posix_test_mission.test",
              mission: "VTOL_mission_1",
              vehicle: "tailsitter"
            ],
            [
              name: "VTOL tiltrotor",
              test: "mavros_posix_test_mission.test",
              mission: "VTOL_mission_1",
              vehicle: "tiltrotor"
            ],

          ]
        
          def test_nodes = [:]
          for (def i = 0; i < missions.size(); i++) {
            test_nodes.put(missions[i].name, createTestNode(missions[i]))
          }

          parallel test_nodes
        } // script
      } // steps
    } // ROS Tests

  } //stages
  environment {
    CCACHE_DIR = '/tmp/ccache'
    CI = true
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10', artifactDaysToKeepStr: '30'))
    timeout(time: 60, unit: 'MINUTES')
  }
} // pipeline

def createTestNode(Map test_def) {
  return {
    node {
      cleanWs()
      docker.image("px4io/px4-dev-ros:2018-03-30").inside('-e HOME=${WORKSPACE}') {
        stage(test_def.name) {
          stages {

            stage("unstash") {
              sh('export')
              unstash 'build_sitl_coverage'
              sh('ls -a')
              sh('ls *')
              when {
                environment name: 'PX4_CMAKE_BUILD_TYPE', value: 'Coverage'
              }
            }

            stage("test") {
              try {
                sh('export')
                sh('ls -a')
                sh('ls *')
                unstash('px4_sitl_package')
                sh('tar -xjpvf build/posix_sitl_default/px4-posix_sitl_default*.bz2')
                sh('px4-posix_sitl_default*/px4/test/rostest_px4_run.sh ' + test_def.test + ' mission:=' + test_def.mission + ' vehicle:=' + test_def.vehicle)
                sh('px4-posix_sitl_default*/px4/Tools/ecl_ekf/process_logdata_ekf.py .ros/log/*/*.ulg')

              } catch (exc) {
                archiveArtifacts(allowEmptyArchive: false, artifacts: '.ros/**/*.ulg, .ros/**/rosunit-*.xml, .ros/**/rostest-*.log')
                throw (exc)

              } finally {
                sh('px4-posix_sitl_default*/px4/Tools/upload_log.py -q --description "${JOB_NAME}: ${STAGE_NAME}" --feedback "${JOB_NAME} ${CHANGE_TITLE} ${CHANGE_URL}" --source CI .ros/log/*/*.ulg')
                archiveArtifacts(allowEmptyArchive: false, artifacts: '.ros/**/*.pdf, .ros/**/*.csv')

              }
            }

            stage("upload coverage") {
              sh('export')
              sh('ls -a')
              sh('ls *')
              withCredentials([string(credentialsId: 'FIRMWARE_CODECOV_TOKEN', variable: 'CODECOV_TOKEN')]) {
                sh 'curl -s https://codecov.io/bash | bash -s - -F mission'
              }
              when {
                environment name: 'PX4_CMAKE_BUILD_TYPE', value: 'Coverage'
              }
            }

          } // stages
        }
      }
      cleanWs()
    }
  }
}
